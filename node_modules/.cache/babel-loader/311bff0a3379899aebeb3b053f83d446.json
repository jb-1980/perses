{"ast":null,"code":"import _toConsumableArray from \"/home/joseph/projects/perses/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/joseph/projects/perses/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/joseph/projects/perses/src/renderer.tsx\";\nimport * as React from \"react\";\nimport PersesMarkdown from \"./perses-markdown\";\nimport { Renderers } from \"./widgets/index.ts\";\nimport { useRendererContext } from \"./contexts/renderer-context\";\nexport var Renderer = function Renderer() {\n  var _useRendererContext = useRendererContext(),\n      _useRendererContext$q = _useRendererContext.question,\n      content = _useRendererContext$q.content,\n      widgets = _useRendererContext$q.widgets,\n      hints = _useRendererContext.hints,\n      calculateGrade = _useRendererContext.calculateGrade,\n      setWidgetProps = _useRendererContext.setWidgetProps;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isCorrect = _React$useState2[0],\n      setIsCorrect = _React$useState2[1];\n\n  var renderWidget = function renderWidget(widgetId) {\n    var _widgets$widgetId = widgets[widgetId],\n        type = _widgets$widgetId.type,\n        options = _widgets$widgetId.options;\n\n    var _Renderers$find = Renderers.find(function (w) {\n      return w.type === type;\n    }),\n        WidgetRenderer = _Renderers$find.widget;\n\n    return React.createElement(WidgetRenderer, Object.assign({\n      key: widgetId,\n      getNewProps: function getNewProps(newProps) {\n        return setWidgetProps(widgetId, newProps);\n      }\n    }, options, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }));\n  };\n\n  var getOutput = function getOutput(ast) {\n    var output = [];\n\n    if (Array.isArray(ast)) {\n      ast.forEach(function (node) {\n        output.push.apply(output, _toConsumableArray(getOutput(node)));\n      });\n    } else if (Array.isArray(ast.content)) {\n      ast.content.forEach(function (node) {\n        output.push.apply(output, _toConsumableArray(getOutput(node)));\n      });\n    } else if (ast.type === \"widget\") {\n      output.push(renderWidget(ast.id));\n    } else {\n      output.push(PersesMarkdown.basicOutput(ast));\n    }\n\n    return output;\n  };\n\n  var ast = PersesMarkdown.parse(content);\n  var output = getOutput(ast);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, output, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, isCorrect === null ? null : isCorrect ? \"correct\" : \"Incorrect\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setIsCorrect(calculateGrade());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"grade\"));\n};","map":{"version":3,"sources":["/home/joseph/projects/perses/src/renderer.tsx"],"names":["React","PersesMarkdown","Renderers","useRendererContext","Renderer","question","content","widgets","hints","calculateGrade","setWidgetProps","useState","isCorrect","setIsCorrect","renderWidget","widgetId","type","options","find","w","WidgetRenderer","widget","newProps","getOutput","ast","output","Array","isArray","forEach","node","push","id","basicOutput","parse"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport PersesMarkdown from \"./perses-markdown\"\nimport { Renderers } from \"./widgets/index.ts\"\nimport { useRendererContext } from \"./contexts/renderer-context\"\n\nexport const Renderer = () => {\n  const {\n    question: { content, widgets },\n    hints,\n    calculateGrade,\n    setWidgetProps,\n  } = useRendererContext()\n\n  const [isCorrect, setIsCorrect] = React.useState(null)\n  const renderWidget = widgetId => {\n    const { type, options } = widgets[widgetId]\n    const { widget: WidgetRenderer } = Renderers.find(w => w.type === type)\n\n    return (\n      <WidgetRenderer\n        key={widgetId}\n        getNewProps={newProps => setWidgetProps(widgetId, newProps)}\n        {...options}\n      />\n    )\n  }\n\n  const getOutput = ast => {\n    let output = []\n    if (Array.isArray(ast)) {\n      ast.forEach(node => {\n        output.push(...getOutput(node))\n      })\n    } else if (Array.isArray(ast.content)) {\n      ast.content.forEach(node => {\n        output.push(...getOutput(node))\n      })\n    } else if (ast.type === \"widget\") {\n      output.push(renderWidget(ast.id))\n    } else {\n      output.push(PersesMarkdown.basicOutput(ast))\n    }\n\n    return output\n  }\n\n  const ast = PersesMarkdown.parse(content)\n  const output = getOutput(ast)\n  return (\n    <div>\n      {output}\n      <p>{isCorrect === null ? null : isCorrect ? \"correct\" : \"Incorrect\"}</p>\n      <button onClick={() => setIsCorrect(calculateGrade())}>grade</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}