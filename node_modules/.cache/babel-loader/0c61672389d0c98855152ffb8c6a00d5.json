{"ast":null,"code":"import _objectWithoutProperties from \"/home/joseph/projects/perses/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/home/joseph/projects/perses/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/joseph/projects/perses/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/joseph/projects/perses/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/joseph/projects/perses/src/contexts/editor-context.tsx\";\nimport * as React from \"react\";\nimport { EditorState, Modifier } from \"draft-js\";\nimport \"draft-js/dist/Draft.css\";\nimport { Editors } from \"../widgets\";\nimport { templates } from \"../templates\";\nvar EditorContext = React.createContext({\n  question: {\n    content: \"\",\n    images: {},\n    widgets: {}\n  },\n  hints: {}\n});\n\nvar EditorContextProvider = function EditorContextProvider(_ref) {\n  var initialContents = _ref.initialContents,\n      children = _ref.children;\n\n  var _React$useState = React.useState(EditorState.createEmpty()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      editorState = _React$useState2[0],\n      setEditorState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(initialContents.question),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      question = _React$useState4[0],\n      setQuestion = _React$useState4[1];\n\n  var _React$useState5 = React.useState(initialContents.hints),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      hints = _React$useState6[0],\n      setHints = _React$useState6[1];\n\n  var updateEditorContent = function updateEditorContent(newEditorState) {\n    setEditorState(newEditorState);\n    setQuestion(_objectSpread({}, question, {\n      content: newEditorState.getCurrentContent().getPlainText(\"\\n\")\n    }));\n  };\n\n  var insertWidget = function insertWidget(widgetType) {\n    var currentContent = editorState.getCurrentContent();\n    var currentSelection = editorState.getSelection();\n    var widgets = question.widgets;\n    var nthWidget = Object.keys(widgets).filter(function (id) {\n      return widgets[id].type === widgetType;\n    }).map(function (id) {\n      return +id.split(\" \")[1];\n    }).reduce(function (maxId, currId) {\n      return Math.max(maxId, currId);\n    }, 0);\n    var widgetId = \"\".concat(widgetType, \" \").concat(nthWidget + 1);\n    var widget = Modifier.replaceText(currentContent, currentSelection, \"[[\\u2603 \".concat(widgetId, \"]]\"));\n    var newEditorState = EditorState.push(editorState, widget, \"insert-characters\");\n    setEditorState(newEditorState);\n    setQuestion(_objectSpread({}, question, {\n      content: newEditorState.getCurrentContent().getPlainText(\"\\n\"),\n      widgets: _objectSpread({}, question.widgets, _defineProperty({}, widgetId, Editors.find(function (w) {\n        return w.type === widgetType;\n      })))\n    }));\n  };\n\n  var insertTemplate = function insertTemplate(templateName) {\n    var currentContent = editorState.getCurrentContent();\n    var currentSelection = editorState.getSelection();\n    var template = Modifier.replaceText(currentContent, currentSelection, templates[templateName]);\n    var newEditorState = EditorState.push(editorState, template, \"insert-characters\");\n    updateEditorContent(newEditorState);\n  };\n  /* This function should only be used in a widget editor as a means of updating\n   * the widget's options in the question object\n   */\n\n\n  var setWidgetProps = function setWidgetProps(widgetId, newProps) {\n    var widget = question.widgets[widgetId]; // There should always be a widget because setWidgetProps should only be called\n    // inside a widget editor\n\n    if (!widget) {\n      throw new Error(\"No widget found for \".concat(widgetId, \", was setWidgetProps used outside of widget editor?\"));\n    }\n\n    setQuestion(_objectSpread({}, question, {\n      widgets: _objectSpread({}, question.widgets, _defineProperty({}, widgetId, _objectSpread({}, widget, {\n        options: newProps\n      })))\n    }));\n  };\n\n  var serialize = function serialize() {\n    var _widgets = Object.entries(question.widgets).reduce(function (acc, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          value = _ref3[1];\n\n      var editor = value.editor,\n          transform = value.transform,\n          options = value.options,\n          cleanWidget = _objectWithoutProperties(value, [\"editor\", \"transform\", \"options\"]);\n\n      acc[key] = _objectSpread({}, cleanWidget, {\n        options: transform(options)\n      });\n      return acc;\n    }, {});\n\n    return {\n      question: _objectSpread({}, question, {\n        widgets: _widgets\n      }),\n      hints: hints\n    };\n  };\n\n  return React.createElement(EditorContext.Provider, {\n    value: {\n      question: question,\n      hints: hints,\n      editorState: editorState,\n      setQuestion: setQuestion,\n      updateEditorContent: updateEditorContent,\n      setWidgetProps: setWidgetProps,\n      insertWidget: insertWidget,\n      insertTemplate: insertTemplate,\n      serialize: serialize\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, children);\n};\n\nvar useEditorContext = function useEditorContext() {\n  var editorContext = React.useContext(EditorContext);\n\n  if (editorContext === undefined) {\n    throw new Error(\"useEditorContext must be used in an EditorContextProvider\");\n  }\n\n  return editorContext;\n};\n\nexport { EditorContextProvider, useEditorContext };","map":{"version":3,"sources":["/home/joseph/projects/perses/src/contexts/editor-context.tsx"],"names":["React","EditorState","Modifier","Editors","templates","EditorContext","createContext","question","content","images","widgets","hints","EditorContextProvider","initialContents","children","useState","createEmpty","editorState","setEditorState","setQuestion","setHints","updateEditorContent","newEditorState","getCurrentContent","getPlainText","insertWidget","widgetType","currentContent","currentSelection","getSelection","nthWidget","Object","keys","filter","id","type","map","split","reduce","maxId","currId","Math","max","widgetId","widget","replaceText","push","find","w","insertTemplate","templateName","template","setWidgetProps","newProps","Error","options","serialize","_widgets","entries","acc","key","value","editor","transform","cleanWidget","useEditorContext","editorContext","useContext","undefined"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { EditorState, Modifier } from \"draft-js\"\nimport \"draft-js/dist/Draft.css\"\n\nimport { Editors } from \"../widgets\"\nimport { templates } from \"../templates\"\n\ntype questionType = {\n  content: string\n  images: {}\n  widgets: { [key: string]: any }\n}\n\ntype contextTypes = {\n  question: questionType\n  hints: {}\n  editorState: EditorState\n  setQuestion: React.Dispatch<React.SetStateAction<questionType>>\n  updateEditorContent: (newEditorState: EditorState) => void\n  setWidgetProps: (widgetId: string, newProps: {}) => void\n  insertWidget: (widgetId: string) => any\n  insertTemplate: (templateName: string) => any\n  serialize: () => questionType\n}\n\nconst EditorContext = React.createContext<Partial<contextTypes>>({\n  question: {\n    content: \"\",\n    images: {},\n    widgets: {},\n  },\n  hints: {},\n})\n\ntype editorContextProps = {\n  initialContents: {\n    question: questionType\n    hints: {}\n  }\n  children: any\n}\n\nconst EditorContextProvider = ({\n  initialContents,\n  children,\n}: editorContextProps) => {\n  const [editorState, setEditorState] = React.useState(\n    EditorState.createEmpty()\n  )\n  const [question, setQuestion] = React.useState(initialContents.question)\n  const [hints, setHints] = React.useState(initialContents.hints)\n\n  const updateEditorContent = (newEditorState: EditorState) => {\n    setEditorState(newEditorState)\n    setQuestion({\n      ...question,\n      content: newEditorState.getCurrentContent().getPlainText(\"\\n\"),\n    })\n  }\n\n  const insertWidget = (widgetType: string) => {\n    const currentContent = editorState.getCurrentContent()\n    const currentSelection = editorState.getSelection()\n\n    const { widgets } = question\n    const nthWidget = Object.keys(widgets)\n      .filter(id => widgets[id].type === widgetType)\n      .map(id => +id.split(\" \")[1])\n      .reduce((maxId, currId) => Math.max(maxId, currId), 0)\n\n    const widgetId = `${widgetType} ${nthWidget + 1}`\n    const widget = Modifier.replaceText(\n      currentContent,\n      currentSelection,\n      `[[☃ ${widgetId}]]`\n    )\n\n    const newEditorState = EditorState.push(\n      editorState,\n      widget,\n      \"insert-characters\"\n    )\n\n    setEditorState(newEditorState)\n    setQuestion({\n      ...question,\n      content: newEditorState.getCurrentContent().getPlainText(\"\\n\"),\n      widgets: {\n        ...question.widgets,\n        [widgetId]: Editors.find(w => w.type === widgetType),\n      },\n    })\n  }\n\n  const insertTemplate = (templateName: string) => {\n    const currentContent = editorState.getCurrentContent()\n    const currentSelection = editorState.getSelection()\n\n    const template = Modifier.replaceText(\n      currentContent,\n      currentSelection,\n      templates[templateName]\n    )\n\n    const newEditorState = EditorState.push(\n      editorState,\n      template,\n      \"insert-characters\"\n    )\n\n    updateEditorContent(newEditorState)\n  }\n\n  /* This function should only be used in a widget editor as a means of updating\n   * the widget's options in the question object\n   */\n  const setWidgetProps = (widgetId: string, newProps: {}) => {\n    const widget = question.widgets[widgetId]\n\n    // There should always be a widget because setWidgetProps should only be called\n    // inside a widget editor\n    if (!widget) {\n      throw new Error(\n        `No widget found for ${widgetId}, was setWidgetProps used outside of widget editor?`\n      )\n    }\n\n    setQuestion({\n      ...question,\n      widgets: {\n        ...question.widgets,\n        [widgetId]: { ...widget, options: newProps },\n      },\n    })\n  }\n\n  const serialize = () => {\n    const _widgets = Object.entries(question.widgets).reduce(\n      (acc: {}, [key, value]) => {\n        const { editor, transform, options, ...cleanWidget } = value\n        acc[key] = { ...cleanWidget, options: transform(options) }\n        return acc\n      },\n      {}\n    )\n    return { question: { ...question, widgets: _widgets }, hints }\n  }\n\n  return (\n    <EditorContext.Provider\n      value={{\n        question,\n        hints,\n        editorState,\n        setQuestion,\n        updateEditorContent,\n        setWidgetProps,\n        insertWidget,\n        insertTemplate,\n        serialize,\n      }}\n    >\n      {children}\n    </EditorContext.Provider>\n  )\n}\n\nconst useEditorContext = () => {\n  const editorContext = React.useContext(EditorContext)\n\n  if (editorContext === undefined) {\n    throw new Error(\"useEditorContext must be used in an EditorContextProvider\")\n  }\n\n  return editorContext\n}\n\nexport { EditorContextProvider, useEditorContext }\n"]},"metadata":{},"sourceType":"module"}